




vim.__g         = {}
vim.__lazy      = require("ngpong.utils.lazy")
vim.__class     = vim.__lazy.require("ngpong.utils.oop")
vim.__async     = vim.__lazy.require("ngpong.utils.async")
vim.__job       = vim.__lazy.require("ngpong.utils.async.job")
vim.__bouncer   = vim.__lazy.require("ngpong.utils.debounce")
vim.__str       = vim.__lazy.require("ngpong.utils.str")
vim.__tbl       = vim.__lazy.require("ngpong.utils.tbl")
vim.__fs        = vim.__lazy.require("ngpong.utils.fs")
vim.__path      = vim.__lazy.require("ngpong.utils.path")
vim.__git       = vim.__lazy.require("ngpong.utils.git")
vim.__util     = vim.__lazy.require("ngpong.utils.tool")
vim.__logger    = vim.__lazy.require("ngpong.utils.log")
vim.__timestamp = vim.__lazy.require("ngpong.utils.timestamp")
vim.__icons     = vim.__lazy.require("ngpong.utils.icon")
vim.__json      = vim.__lazy.require("ngpong.utils.json")
vim.__libp      = vim.__lazy.require("ngpong.utils.libp")
vim.__autocmd   = vim.__lazy.require("ngpong.core.autocmd")
vim.__event     = vim.__lazy.require("ngpong.core.events")
vim.__key       = vim.__lazy.require("ngpong.core.key")
vim.__filter    = vim.__lazy.require("ngpong.core.filter")
vim.__ui        = vim.__lazy.require("ngpong.core.ui")
vim.__helper    = vim.__lazy.require("ngpong.core.helper")
vim.__buf       = vim.__lazy.require("ngpong.core.buf")
vim.__mark      = vim.__lazy.require("ngpong.core.buf")
vim.__win       = vim.__lazy.require("ngpong.core.win")
vim.__tab       = vim.__lazy.require("ngpong.core.tab")
vim.__cursor    = vim.__lazy.require("ngpong.core.cursor")
vim.__jumplst   = vim.__lazy.require("ngpong.core.jumplst")
vim.__qfixlst   = vim.__lazy.require("ngpong.core.qfixlst")
vim.__color     = vim.__lazy.require("ngpong.core.color")
vim.__plugin    = vim.__lazy.require("ngpong.core.plugin")

local kmodes = vim.__key.e_mode
local etypes = vim.__event.types

vim.__key.rg({ "i", "c" }, "<C-g>", function()
  vim.__logger.info(vim.fn.pumvisible())
end)

vim.opt.rtp:prepend("/home/ngpong/.local/share/nvim/lazy/lazy.nvim")
require("lazy").setup({
  spec = {
    {
      "ellisonleao/gruvbox.nvim",
      priority = 10000,
      opts = {},
      config = function(_, opts)
        require("gruvbox").setup(opts)
        vim.go.background = "dark"
        vim.cmd.colorscheme("gruvbox")
      end
    },
    {
      "nvim-treesitter/nvim-treesitter",
      lazy = false,
      branch = "main",
      build = ":TSUpdate",
      dependencies = {
        {
          "nvim-treesitter/nvim-treesitter-textobjects",
          branch = "main",
          opts = {
            select = {
              lookahead = true,
              selection_modes = {
                ['@parameter.outer'] = 'v', -- charwise
                ['@function.outer'] = 'V', -- linewise
                ['@class.outer'] = '<c-v>', -- blockwise
              },
              include_surrounding_whitespace = false,
            },
          }
        }
      },
      opts_extend = { "ensure_install" },
      opts = {
        ensure_install = { "cpp", "c" },
        ignore_install = {},
      },
      config = function(_, opts)
        require("nvim-treesitter").setup(opts)

        -- enhance tinyd performance?
        -- https://www.reddit.com/r/neovim/comments/1144spy/will_treesitter_ever_be_stable_on_big_files/
        -- vim.treesitter.query.set("javascript", "injections", "")
        -- vim.treesitter.query.set("typescript", "injections", "")
        -- vim.treesitter.query.set("comment", "injections", "")
        -- vim.treesitter.query.set("lua", "injections", "")
        -- vim.treesitter.query.set("cpp", "injections", "")

        -- treesitter highlight
        vim.__autocmd.augroup("treesitter"):on("FileType", function(args)
          local bufnr = args.buf
          local lang = args.match

          -- TODO: fold method
          -- https://github.com/nvim-treesitter/nvim-treesitter/wiki/Installation#packernvim
          -- vim.wo.foldmethod  = "expr"
          -- vim.wo.foldtext = ""
          -- vim.wo.foldenable = true
          vim.wo.foldexpr = "v:lua.vim.treesitter.foldexpr()"

          vim.treesitter.start(bufnr, lang)
          -- vim.bo[bufnr].syntax = "ON" -- enable legcy highlight engine if needed
        end, { pattern = opts.ensure_install  })
      end,
    },
    {
      "neovim/nvim-lspconfig",
      dependencies = {
        "williamboman/mason.nvim",
        "williamboman/mason-lspconfig.nvim",
        "p00f/clangd_extensions.nvim"
      },
      opts = {
        inlay_hints = {
          enabled = false,
        },
        codelens = {
          enabled = false,
        },
        diagnostics = {
          underline = {
            severity = {
              vim.diagnostic.severity.ERROR,
              vim.diagnostic.severity.WARN,
              vim.diagnostic.severity.INFO,
              vim.diagnostic.severity.HINT,
            },
          },
          update_in_insert = false, -- https://github.com/neovim/neovim/issues/26078
          virtual_text = {
            spacing = 1,
            source = "if_many",
            prefix = "●",
          },
          severity_sort = true,
          signs = false,
        },
        capabilities = {
          workspace = {
            didChangeWatchedFiles = {
              dynamicRegistration = true
            }
          }
        },
        on_attach = function(cli, bufnr)
          -- 禁用lsp提供的格式化能力
          -- cli.server_capabilities.documentFormattingProvider = false
          -- cli.server_capabilities.documentOnTypeFormattingProvider = false
          -- cli.server_capabilities.documentRangeFormattingProvider = false

          -- 禁用lsp提供的高亮能力
          -- cli.server_capabilities.semanticTokensProvider = nil
        end,
        servers = {
          clangd = {
            keys = {
              { "<leader>lh", "<CMD>ClangdTypeHierarchy<CR>", silent = true },
              { "<leader>lm", "<CMD>ClangdMemoryUsage<CR>", silent = true },
              { "<leader>la", "<CMD>ClangdAST<CR>", silent = true },
              { "gs", "<CMD>ClangdSwitchSourceHeader<CR>", silent = true },
            },
            cmd = {
              "clangd-19",
              "-j=16",
              "--clang-tidy",
              "--background-index",
              "--background-index-priority=normal",
              "--ranking-model=decision_forest",
              "--completion-style=detailed",
              "--header-insertion=never", -- iwyu
              "--header-insertion-decorators=false",
              "--malloc-trim",
              "--pch-storage=memory",
              "--limit-references=0",
              "--limit-results=30",
              "--include-cleaner-stdlib",
              -- "--compile-commands-dir=/home/ngpong/code/cpp/CPP-Study-02/TEST/TEST_93/",
              -- "--log=verbose",
            },
            single_file_support = true,
            filetypes = { "c", "cpp", "objc", "objcpp", "cuda", "tcc" },
            capabilities = {
              offsetEncoding = { "utf-16" },
              textDocument = {
                completion = {
                  completionItem = {
                    snippetSupport = true
                  }
                }
              },
            },
            on_attach = function()
              -- inlay_hints.setup_autocmd()
              -- inlay_hints.set_inlay_hints()
            end
          },
        },
      },
      config = function(_, opts)
        -- 禁用日志
      vim.lsp.set_log_level("off")

      -- setup diagnostic
      vim.diagnostic.config(opts.diagnostics)

      -- setup options
      vim.__event.rg(etypes.ATTACH_LSP, function(state, e)
        local cli   = state.cli
        local bufnr = state.bufnr

        -- options
        -- https://neovim.io/doc/user/lsp.html#lsp-quickstart
        -- vim.bo[bufnr].formatexpr = nil
        -- vim.bo[bufnr].omnifunc = nil
        -- vim.bo[bufnr].tagfunc = nil

        -- inlay hint
        if opts.inlay_hints.enabled and cli:supports_method("textDocument/inlayHint") then
          if vim.__buf.is_valid(bufnr) and
             vim.__buf.buftype(bufnr) == "" and
             not vim.tbl_contains(opts.inlay_hints.exclude, vim.__buf.filetype(bufnr))
          then
            vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })
          end
        end

        -- code lens
        if opts.codelens.enabled and cli:supports_method("textDocument/codeLens") then
          vim.lsp.codelens.refresh()
          vim.__autocmd.on({ "BufEnter", "CursorHold", "InsertLeave" }, vim.lsp.codelens.refresh, { buffer = bufnr })
        end
      end)
  
        -- construct client capabilities
        local capabilities = {}
        do
          local lsp_capabilities = vim.lsp.protocol.make_client_capabilities()
          local usr_capabilities = opts.capabilities or {}
  
          local cmp_capabilities
          do
            local success, engine = pcall(require, "blink.cmp")
            if success then
              cmp_capabilities = engine.get_lsp_capabilities()
            else
              success, engine = pcall(require, "cmp_nvim_lsp")
              assert(success)
  
              cmp_capabilities = engine.default_capabilities()
            end
          end
  
          capabilities = vim.__tbl.rr_extend(
            {},
            cmp_capabilities,
            lsp_capabilities,
            usr_capabilities
          )
        end
  
        local function make_on_attach(extra)
          return function(cli, bufnr)
            opts.on_attach(cli, bufnr)
            if extra then extra(cli, bufnr) end
          end
        end
        local function setup_server(server, server_opts)
          server_opts.on_attach = make_on_attach(server_opts.on_attach)
  
          local final_opts = vim.__tbl.rr_extend(
            { capabilities = capabilities },
            server_opts or {}
          )
  
          require("lspconfig")[server].setup(final_opts)
        end
  
        for server, server_opts in pairs(opts.servers) do
          setup_server(server, server_opts)
        end
      end
    },
    {
      "williamboman/mason.nvim",
      lazy = true,
      cmd = "Mason",
      keys = {
        { "<leader>P", "<CMD>Mason<CR>", desc = "open mason package manager.", },
      },
      opts_extend = { "ensure_installed" },
      opts = {
        log_level = vim.log.levels.OFF,
        max_concurrent_installers = 16,
        PATH = "prepend", -- prepend | append | skip
        ui = {
          check_outdated_packages_on_open = false,
          border = "rounded",
          width = 0.8,
          height = 0.8,
          icons = {
            package_installed = "◍",
            package_pending = "◍",
            package_uninstalled = "◍"
          },
          keymaps = {
              toggle_package_expand = "<CR>",
              install_package = "i",
              uninstall_package = "x",
              update_package = "u",
              update_all_packages = "U",
              check_package_version = "c",
              check_outdated_packages = "C",
              cancel_installation = "<C-c>",
              apply_language_filter = "f",
              toggle_package_install_log = "<CR>",
              toggle_help = "?",
          },
        },
        pip = {
          upgrade_pip = false,
          install_args = { "--proxy", "http://127.0.0.1:7890" },
        },
        ensure_installed = { "clang-format" }
      },
      config = function(_, opts)
        require("mason").setup(opts)
        require("mason-lspconfig").setup()
  
        local mr         = require("mason-registry")
        local server_map = require("mason-lspconfig.mappings.server").lspconfig_to_package or {}
  
        mr:on("package:install:success", vim.schedule_wrap(function(p)
          vim.__notifier.info(string.format("%s: successfully installed", p.name))
  
          vim.defer_fn(function()
            if not server_map[p.name] then
              return
            end
  
            require("lazy.core.handler.event").trigger({
              event = "FileType",
              buf = vim.api.nvim_get_current_buf(),
            })
          end, 100)
        end))
  
        mr:on("package:install:failed", vim.schedule_wrap(function(p)
          vim.__notifier.err(string.format("%s: failed to install", p.name))
        end))
  
        local function do_install(update)
          local servers = vim.__plugin.opts("nvim-lspconfig").servers
  
          local ensure_installed = {}
          vim.__tbl.insert_arr(ensure_installed, opts.ensure_installed)
          vim.__tbl.insert_arr(ensure_installed, vim.__tbl.keys(servers))
  
          for _, name in ipairs(ensure_installed) do
            name = server_map[name] or name
  
            if not mr.is_installed(name) then
              mr.get_package(name):install()
            elseif update then
              local p = mr.get_package(name)
              p:check_new_version(function(ok, version)
                if ok then
                  p:install({ version = version.latest_version })
                end
              end)
            end
          end
        end
        local function install_necessary()
          local last_update_marker
          do
            local mason_settings = require("mason.settings").current
            local mason_root = mason_settings.install_root_dir
            last_update_marker = vim.__path.join(mason_root, "registry-last-update")
          end
  
          local content     = vim.__fs.read(last_update_marker)
          local last_update = content and tonumber(vim.trim(content))
  
          if not last_update or last_update <= 0 then
            last_update = 0
          end
  
          local now = vim.__timestamp.get_utc() or 0
          local max = 1000 * 60 * 60 * 24 * 7 -- 7天
  
          if now - last_update > max then
            vim.__fs.write(last_update_marker, tostring(now))
            mr.update(function(success)
              if not success then return vim.__notifier.err("update mason registry faild") end
              do_install(true)
            end)
          else
            do_install()
          end
        end
  
        install_necessary()
      end
    },
    {
      "saghen/blink.cmp",
      enabled = true,
      lazy = true,
      event = { "InsertEnter", "CmdlineEnter" },
      dependencies = {
        "echasnovski/mini.snippets"
      },
      build = "cargo build --release",
      opts_extend = { "sources.default" },
      opts = {
        snippets = { preset = "mini_snippets" },
        sources = {
          default = { "lsp", "path", "snippets", "buffer" }
        },
        keymap = {
          preset = "none",
          ["<C-space>"] = { "show", "show_documentation", "hide_documentation" },
          ["<C-p>"] = { "select_prev", "fallback" },
          ["<C-n>"] = { "select_next", "fallback" },
          ["<Tab>"] = { "select_and_accept", "fallback" },
          -- ["<C-u>"] = { "show_signature", "hide_signature", "fallback" },
        },
        signature = {
          enabled = true,
          trigger = {
            show_on_trigger_character = true,
            -- Show the signature help window after typing any of alphanumerics, `-` or `_`
            show_on_keyword = true,
            show_on_insert = false,
            show_on_insert_on_trigger_character = true,
          },
        },
      }
    },
    {
      "echasnovski/mini.snippets",
      lazy = true,
      dependencies = {
        "rafamadriz/friendly-snippets",
      },
      opts = {
        mappings = {
          -- disbale <nop>
          expand = "<C-\\>",
          jump_next = "<C-y>",
          jump_prev = "<C-e>",
          stop = "<C-c>",
        },
      },
      config = function(_, opts)
        local gen_loader = require("mini.snippets").gen_loader
        require("mini.snippets").setup({
          snippets = {
            gen_loader.from_lang(),
          },
          mappings = opts.mappings,
        })
      end
    },
  },
})














    -----------------------------------------------------------------------------------------
    -- local test_specs = {}
    -- local enabled_specs = {
    --   "ellisonleao/gruvbox.nvim",
    --   "nvim-tree/nvim-web-devicons",
    --   "neovim/nvim-lspconfig",
    --   -- -- "ibhagwan/fzf-lua",
    --   -- "nvim-treesitter/nvim-treesitter",
    --   -- "stevearc/profile.nvim",
    --   "saghen/blink.cmp",

    --   -- "lewis6991/gitsigns.nvim",
    --   -- "folke/snacks.nvim"
    -- }
    -- local function cond(spec)
    --   for _, _spec in ipairs(enabled_specs) do
    --     if spec[1] == _spec then
    --       return true
    --     end
    --   end
    --   return false
    -- end
    -- for _, spec in ipairs(specs) do
    --   if vim.isarray(spec) then
    --     for _, subspec in pairs(spec) do
    --       if cond(subspec) then
    --         for _, depend in ipairs(subspec.dependencies or {}) do
    --           if type(depend) == "string" then
    --             table.insert(enabled_specs, depend)
    --           else
    --             table.insert(enabled_specs, depend[1])
    --           end
    --         end
    --       end
    --     end
    --   else
    --     if cond(spec) then
    --       for _, depend in ipairs(spec.dependencies or {}) do
    --         if type(depend) == "string" then
    --           table.insert(enabled_specs, depend)
    --         else
    --           table.insert(enabled_specs, depend[1])
    --         end
    --       end
    --     end
    --   end
    -- end
    -- for _, spec in ipairs(specs) do
    --   if vim.isarray(spec) then
    --     local spec_cpy = {}
    --     for _, subspec in pairs(spec) do
    --       if cond(subspec) then
    --         table.insert(spec_cpy, subspec)
    --       end
    --     end

    --     if #spec_cpy > 0 then
    --       table.insert(test_specs, spec_cpy)
    --     end
    --   else
    --     if cond(spec) then
    --       table.insert(test_specs, spec)
    --     end
    --   end
    -- end
    -- specs = test_specs
    -----------------------------------------------------------------------------------------











local tb = { 1, 2, 3, 4, 5 } -- maybe a big table

local function thread_solution()
  vim.__logger.info("table size = ", #tb)

  local uv = vim.uv or vim.loop

  local function getencdec()
    local m = require("string.buffer")
    return m.encode, m.decode
  end

  local encode, decode = getencdec()

  local worker = uv.new_work(function(tb_bc)
    -- local getencdec0 = loadstring(getencdec_bc)
    local buffer = require("string.buffer")

    local tb0 = buffer.decode(tb_bc)
    return buffer.encode(tb0)
  end, vim.schedule_wrap(function(t_bc)
    local t = decode(t_bc)
    vim.__logger.info("tablesize = ", #t)
  end))

  vim.__key.rg("n", "<f1>", vim.__helper.dclock:wrap(function()
    worker:queue(encode(tb))
  end))
end
thread_solution()

local function ipc_solution()
  print("table size = ", #tb)

  local uv = vim.loop
  local buffer = require("string.buffer")

  local ftmp = vim.fn.tempname()
  if vim.__fs.exists(ftmp) then
    uv.fs_unlink(ftmp)
  end

  local server = uv.new_pipe(false)
  server:bind(ftmp)
  server:listen(128, function(err)
    assert(not err, err)

    local client = uv.new_pipe(false)
    server:accept(client)
    print("accept client")
    client:read_start(function(err, chunk)
      assert(not err, err)
      if chunk then
        print(chunk)
      else
        print("close client!")
        client:shutdown()
        client:close()
      end
    end)

    vim.schedule(function ()
      vim.__key.rg("n", "<f1>", vim.__helper.dclock:wrap(function()
        client:write(buffer.encode(tb))
      end))
    end)
  end)

  uv.new_thread(function(ftmp)
    local uv = vim.loop
    local buffer = require("string.buffer")

    local client = uv.new_pipe(false)
    client:connect(ftmp, function(err)
      print(string.format("connet to server. err = %s, thread = %s", err or "", tostring(uv.thread_self())))
      assert(not err, err)

      client:read_start(function (err, chunk)
        print(string.format("client read err = %s, thread = %s", err or "", tostring(uv.thread_self())))
        assert(not err, err)
        if chunk then
          local tb = buffer.decode(chunk)
          print("client !! table size = ", #tb)
        else
          client:close()
        end
      end)
    end)
    uv.run("default")
  end, ftmp)
end
-- ipc_solution()